type Comptroller @entity {
  id: String!
  priceOracleAddress: Bytes!
  "Current factor used to determine repayAmount for liquidating"
  closeFactorMantissa: BigInt!
  "The current percent bonus liquidators get for liquidating"
  liquidationIncentiveMantissa: BigInt!
  transfersPaused: Boolean!
  seizesPaused: Boolean!
}

### Markets (cToken) ###

type Market @entity {
  "cToken address"
  id: String!
  mintsPaused: Boolean!
  borrowsPaused: Boolean!
  "cToken symbol"
  symbol: String!
  "cToken name"
  name: String!
  "Underlying token symbol"
  underlyingSymbol: String!
  "Underlying token name"
  underlyingName: String!
  "Underlying token address"
  underlyingAddress: Bytes!
  "Underlying token decimal length"
  underlyingDecimals: Int!
  "Underlying token price in ETH"
  underlyingPriceETH: BigDecimal!
  "Underlying token price in USD"
  underlyingPriceUSD: BigDecimal!
  "Number of suppliers active in the market"
  numberOfSuppliers: BigInt!
  "cToken supply. cTokens have 8 decimals"
  totalSupply: BigDecimal!
  "Yearly supply rate. With 2104400 blocks per year"
  supplyRate: BigDecimal!
  "Number of borrowers active in the market"
  numberOfBorrowers: BigInt!
  "Borrows in the market"
  totalBorrows: BigDecimal!
  "Yearly borrow rate. With 2102400 blocks per year"
  borrowRate: BigDecimal!

  "The cToken contract balance of ERC20 or ETH"
  cash: BigDecimal!
  "Collateral factor determining how much one can borrow"
  collateralFactor: BigDecimal!
  "Exchange rate of tokens / cTokens"
  exchangeRate:  BigDecimal!
  "Address of the interest rate model"
  interestRateModelAddress: Bytes!
  "Reserves stored in the contract"
  reserves: BigDecimal!
  # Fields that are not in compounds api
  "Block the market is updated to"
  accrualBlockNumber: BigInt!
  "Timestamp the market was most recently updated"
  blockTimestamp: BigInt!
  "The history of the markets borrow index return (Think S&P 500)"
  borrowIndex: BigDecimal!
  "The factor determining interest that goes to reserves"
  reserveFactor: BigInt!
  compBorrowSpeed: BigInt!
  compSupplySpeed: BigInt!
  borrowCap: BigInt!
}

interface MarketEvent {
  "Transaction hash concatenated with log index"
  id: String!
  "Relation to market"
  market: Market!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "Account that sent tokens"
  from: Bytes!
  "Account that received tokens"
  to: Bytes!
  "cTokens transferred"
  amount: BigDecimal!
}

"""
TransferEvent will be stored for every mint, redeem, liquidation, and any normal transfer between two accounts.
"""
type TransferEvent implements MarketEvent @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: String!
  "Relation to market"
  market: Market!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "Account that sent tokens"
  from: Bytes!
  "Account that received tokens"
  to: Bytes!
  "cTokens transferred"
  amount: BigDecimal!
}

"""
MintEvent stores information for mints. From address will always be a cToken market address
"""
type MintEvent implements MarketEvent @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: String!
  "Relation to market"
  market: Market!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "Account that sent tokens (cToken contract)"
  from: Bytes!
  "Account that received tokens (minter)"
  to: Bytes!
  "cTokens transferred"
  amount: BigDecimal!
  "Underlying token amount transferred"
  underlyingAmount: BigDecimal!
}

"""
RedeemEvent stores information for redeems. To address will always be a cToken market address
"""
type RedeemEvent implements MarketEvent @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: String!
  "Relation to market"
  market: Market!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "Account that sent tokens (redeemer)"
  from: Bytes!
  "Account that received tokens (cToken contract)"
  to: Bytes!
  "cTokens transferred"
  amount: BigDecimal!
  "Underlying token amount transferred"
  underlyingAmount: BigDecimal!
}

"""
LiquidationEvent stores information for liquidations. The event is emitted from the cToken market address.
"""
type LiquidationEvent implements MarketEvent @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: String!
  "Relation to market"
  market: Market!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "Account being liquidated (borrower)"
  from: Bytes!
  "Liquidator receiving tokens"
  to: Bytes!
  "cTokens transferred"
  amount: BigDecimal!
  "Underlying cToken amount that was repaid by liquidator"
  underlyingRepayAmount: BigDecimal!
}

"""
Underlying transfers are transfers of underlying collateral for both borrows and repays
"""
interface UnderlyingEvent {
  "Transaction hash concatenated with log index"
  id: String!
  "Relation to market"
  market: Market!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "Account that borrowed the tokens"
  borrower: Bytes!
  "Amount of underlying borrowed"
  amount: BigDecimal!
  "Total borrows of this asset the account has"
  accountBorrows: BigDecimal!
}

"""
BorrowEvent stores information for borrows
"""
type BorrowUnderlyingEvent implements UnderlyingEvent @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: String!
  "Relation to market"
  market: Market!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "Account that borrowed the tokens"
  borrower: Bytes!
  "Amount of underlying borrowed"
  amount: BigDecimal!
  "Total borrows of this asset the account has"
  accountBorrows: BigDecimal!
}

"""
RepayEvent stores information for repays. Payer is not always the same as borrower, such as in the event of a Liquidation
"""
type RepayUnderlyingEvent implements UnderlyingEvent @entity(immutable: true) {
  "Transaction hash concatenated with log index"
  id: String!
  "Relation to market"
  market: Market!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  "Account that borrowed the tokens"
  borrower: Bytes!
  "Payer of the borrow funds"
  payer: Bytes!
  "Amount of underlying borrowed"
  amount: BigDecimal!
  "Total borrows of this asset the account has"
  accountBorrows: BigDecimal!
}

### Accounts ###

type Account @entity {
  "User address"
  id: String!
  "Array of cTokens user is in"
  markets: [AccountMarket!]! @derivedFrom(field: "account")
  "Count user has been liquidated"
  countLiquidated: BigInt!
  "Count user has liquidated others"
  countLiquidator: BigInt!
  "True if user has ever borrowed"
  hasBorrowed: Boolean!

  # The following values are added by the JS Wrapper, and must be calculated with the most up
  # to date values based on the block delta for market.exchangeRate and market.borrowIndex
  # They do not need to be in the schema, but they will show up in the explorer playground

  # "If less than 1, the account can be liquidated
  # health: BigDecimal!
  # "Total assets supplied by user"
  # totalBorrowValueInEth: BigDecimal!
  # "Total assets borrowed from user"
  # totalCollateralValueInEth: BigDecimal!
}

type AccountMarket @entity {
  "Concatenation of user address and cToken address"
  id: String!
  "Relation to market"
  market: Market!
  "Relation to account"
  account: Account!
  "Transactions"
  transactions: [AccountMarketTransaction!]! @derivedFrom(field: "accountMarket")
  "Block number this asset was updated at in the contract"
  accrualBlockNumber: BigInt!
  "True if user is entered, false if they are exited"
  enteredMarket: Boolean!
  "cToken balance of the user"
  balance: BigDecimal!
  "Total amount of underlying supplied"
  totalUnderlyingSupplied: BigDecimal!
  "Total amount of underling redeemed"
  totalUnderlyingRedeemed: BigDecimal!
  "The value of the borrow index upon users last interaction"
  accountBorrowIndex: BigDecimal!
  "Total amount underlying borrowed, exclusive of interest"
  totalUnderlyingBorrowed: BigDecimal!
  "Total amount underlying repaid"
  totalUnderlyingRepaid: BigDecimal!
  "Current borrow balance stored in contract (exclusive of interest since accrualBlockNumber)"
  storedBorrowBalance: BigDecimal!

  # The following values are added by the JS Wrapper, and must be calculated with the most up
  # to date values based on the block delta for market.exchangeRate and market.borrowIndex
  # They do not need to be in the schema, but they will show up in the explorer playground

  # supplyBalanceUnderlying: BigDecimal!
  # FORMULA: supplyBalanceUnderlying = cTokenBalance * market.exchangeRate
  # lifetimeSupplyInterestAccrued: BigDecimal!
  # FORMULA: lifetimeSupplyInterestAccrued = supplyBalanceUnderlying - totalUnderlyingSupplied + totalUnderlyingRedeemed
  # borrowBalanceUnderlying: BigDecimal!
  # FORMULA: borrowBalanceUnderlying = storedBorrowBalance * market.borrowIndex / accountBorrowIndex
  # lifetimeBorrowInterestAccrued: BigDecimal!
  # FORMULA: lifetimeBorrowInterestAccrued = borrowBalanceUnderlying - totalUnderlyingBorrowed + totalUnderlyingRepaid
}

type AccountMarketTransaction @entity(immutable: true) {
  "Concatenation of account market, transaction hash and log index"
  id: String!
  "Relation to account market"
  accountMarket: AccountMarket!
  "Block number"
  blockNumber: BigInt!
  "Block time"
  blockTime: BigInt!
  transactionHash: Bytes!
  transactionLogIndex: BigInt!
}

### Proposals ###

enum ProposalStatus {
  Active
  Canceled
  Queued
  Executed
}

type Proposal @entity {
  id: String!
  status: ProposalStatus!
  proposer: Account!
  targets: [Account!]!
  values: [BigInt!]!
  signatures: [String!]!
  calldatas: [Bytes!]!
  startBlockNumber: BigInt!
  endBlockNumber: BigInt!
  description: String!
}
